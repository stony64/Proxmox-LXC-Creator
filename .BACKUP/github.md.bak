# Proxmox LXC Container Creator – GitHub-kompatibler Stand

Hier findest du die optimale Ordner- und Dateistruktur für dein Repository, alle relevanten Dateien im aktuellen, geprüften Zustand sowie Hinweise für eine saubere GitHub-Verwendung.

## 📁 Vorschlag: GitHub-Repo-Struktur

```
proxmox-lxc-creator/
├── create_ct_install.sh
├── translation.func
├── README.md
├── .gitignore
└── (optional) LICENSE
```

## 1. Skripte im GitHub-kompatiblen Stand

### create_ct_install.sh

(Skript wie in der letzten Version 2.7.3 gepostet — du kannst die Datei exakt so belassen.)

### translation.func

(Aktueller Stand, Version 2.3 — beide Sprachbereiche, keine Symbole, alle Keys ergänzt.)

## 2. .gitignore (empfohlen)

Füge eine `.gitignore`-Datei hinzu, um temporäre Daten aus dem Repo fernzuhalten:

```gitignore
*.log
*.bak
*.tmp
*.swp
```

## 3. README.md

(Der empfohlene Markdown-Inhalt wurde zuvor komplett geliefert.)

## 4. Optional: LICENSE

Füge eine Lizenzdatei hinzu, etwa MIT oder Apache 2.0, falls du möchtest, dass andere das Projekt nutzen oder beitragen dürfen.

## 5. Anleitung: Typischer Umgang auf GitHub

- Initialisiere das Repo lokal:  
  ```bash
  git init
  git add .
  git commit -m "Initial commit: Proxmox LXC Container Creator"
  git branch -M main
  ```
- Repository auf GitHub anlegen und Anweisungen zum Push befolgen:
  ```bash
  git remote add origin https://github.com//.git
  git push -u origin main
  ```

## 6. Synchronisation aus VS Code oder CLI

- Code lokal anpassen ➔ `git add .` ➔ `git commit` ➔ `git push`
- Auf dem Proxmox-Host das Repo regelmäßig mit `git pull` aktualisieren, um auf dem neuesten Stand zu bleiben.

## 7. Hinweise für Kollaboration und Wartung

- Änderungswünsche immer als Pull Request oder über das Issues-Modul melden.
- Dokumentiere wichtige Anpassungen im Changelog oder in den Commit-Messages.
- Passe `.gitignore` stets an, wenn du künftig zusätzliche temporäre Dateien generierst.

**Fazit:**  
Mit dieser Struktur ist dein Projekt direkt GitHub-kompatibel, wartungsfreundlich, bestens dokumentiert – und bereit für kollaborative Entwicklung und langfristige Nutzung.