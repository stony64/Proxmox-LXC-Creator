#!/usr/bin/env bash
###############################################################################
# input.func – Interaktive Benutzereingaben
# Version:    2.7.5
# Datum:      2025-07-21
#
# Beschreibung (Deutsch):
# Diese Datei behandelt die interaktive Benutzerführung mittels whiptail.
# Funktionen: Auswahl von Hostname, Passwort, Template, RootFS-Größe, CPU & RAM.
#
# Description (English):
# This module handles interactive prompts using whiptail, including validation.
# Functions: Input for hostname, password, template, rootfs size, CPU and RAM.
#
###############################################################################

### Hostname interaktiv abfragen oder CLI-Wert übernehmen
### Prompt for hostname or accept --hostname argument
input_hostname() {
    if [[ -n "$PARAM_HOSTNAME" ]]; then
        CT_HOSTNAME="$PARAM_HOSTNAME"
        log "Verwende übergebenen Hostname: $CT_HOSTNAME"
        return
    fi

    while true; do
        CT_HOSTNAME=$(whiptail --title "$(dialog_title Hostname)" \
            --inputbox "${MSG[hostname]}" 10 60 "" 3>&1 1>&2 2>&3) || exit_with_log "${MSG[abort]}"

        if [[ -z "$CT_HOSTNAME" ]]; then
            whiptail --title "$(dialog_title Fehler)" --msgbox "${MSG[input_empty]}" 8 60
            continue
        fi

        # Hostname-Validierung: RFC-konforme Zeichen
        if [[ "$CT_HOSTNAME" =~ ^[a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?$ ]]; then
            break
        else
            whiptail --title "$(dialog_title Fehler)" --msgbox "${MSG[input_invalid]}" 8 60
        fi
    done

    log "${MSG[hostname]} $CT_HOSTNAME"
}

### Passwort sicher erfassen (min. 8 Zeichen)
### Prompt for root password with minimum validation
input_password() {
    while true; do
        CT_PASSWORD=$(whiptail --title "$(dialog_title Passwort)" \
            --passwordbox "${MSG[password]}" 10 60 "" 3>&1 1>&2 2>&3) || exit_with_log "${MSG[abort]}"

        if [[ -z "$CT_PASSWORD" || ${#CT_PASSWORD} -lt 8 ]]; then
            whiptail --title "$(dialog_title Fehler)" --msgbox "${MSG[input_invalid]}" 8 60
            continue
        fi
        break
    done

    log "${MSG[password]} wurde erfolgreich gesetzt."
}

### Templates im Verzeichnis anzeigen und Auswahl ermöglichen
### Display template files and let user select one
select_template() {
    log "${MSG[template_select]} $TEMPLATE_PATH"

    # Dateiauswahl absichern (keine Globbing-Probleme)
    mapfile -t templates < <(find "$TEMPLATE_PATH" -maxdepth 1 -type f -name '*-standard_*.tar.zst' | sort)

    [[ ${#templates[@]} -eq 0 ]] && exit_with_log "${MSG[template_none]}"

    local menu_items=()
    for tpl_path in "${templates[@]}"; do
        tpl_file=$(basename "$tpl_path")
        menu_items+=("$tpl_file" "")
    done

    TEMPLATE_FILE=$(whiptail --title "$(dialog_title Template)" \
        --menu "${MSG[template_select]}" 20 70 10 "${menu_items[@]}" 3>&1 1>&2 2>&3) || exit_with_log "${MSG[abort]}"

    OSTEMPLATE="${TEMPLATE_PATH}/${TEMPLATE_FILE}"
    export OSTEMPLATE

    log "${MSG[template_chosen]} $TEMPLATE_FILE"
}

### RootFS-Größe interaktiv abfragen (in GB)
### Prompt for root filesystem size in GB
input_rootfs_size() {
    ROOTFS_SIZE=$(request_positive_integer "${MSG[rootfs]}" "2") || exit_with_log "${MSG[abort]}"
    log "${MSG[rootfs]}: $ROOTFS_SIZE GB"
}

### CPU-/RAM-Ressourcen interaktiv festlegen
### Prompt for CPU cores and memory allocation
input_resources() {
    CT_CORES=$(request_positive_integer "${MSG[cores]}" "1") || exit_with_log "${MSG[abort]}"
    CT_MEMORY=$(request_positive_integer "${MSG[memory]}" "512") || exit_with_log "${MSG[abort]}"
    log "${MSG[cores]}: $CT_CORES, ${MSG[memory]}: $CT_MEMORY MB"
}
