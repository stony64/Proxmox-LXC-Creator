#!/usr/bin/env bash
###############################################################################
# input.func – Interaktive Benutzereingaben für Proxmox LXC Creator
# Version:    2.7.5
# Datum:      2025-07-21
#
# Beschreibung (Deutsch):
# Dieses Modul behandelt alle interaktiven whiptail-Eingaben, z. B.
# Hostname, Passwort, Container-ID, Template, RootFS, Ressourcen und IP.
#
# Description (English):
# This module manages all interactive user prompts via whiptail, including
# hostname, password, container ID, template, rootfs, resources, and IP address.
###############################################################################

###############################################################################
# Interaktive Eingabefunktionen für den Installer-Workflow
###############################################################################

### Container-ID eingeben/anzeigen (optional bei automatischer Vergabe)
### Prompt for custom CT-ID (optional if auto-assigned)
input_ctid() {
    CT_ID=$(whiptail --title "$(dialog_title "Container-ID")" \
        --inputbox "${MSG[ctid_prompt]:-Bitte Container-ID eingeben:}" 8 60 "$CT_ID" 3>&1 1>&2 2>&3) \
        || exit_with_log "${MSG[abort]}"
    log "${MSG[ctid_assigned]} $CT_ID"
}

### Hostname interaktiv abfragen oder CLI-Wert übernehmen
### Prompt for hostname or accept CLI parameter
input_hostname() {
    if [[ -n "$PARAM_HOSTNAME" ]]; then
        CT_HOSTNAME="$PARAM_HOSTNAME"
        log "Verwende übergebenen Hostname: $CT_HOSTNAME"
        return
    fi
    while true; do
        CT_HOSTNAME=$(whiptail --title "$(dialog_title Hostname)" \
            --inputbox "${MSG[hostname]}" 10 60 "" 3>&1 1>&2 2>&3) || exit_with_log "${MSG[abort]}"
        if [[ -z "$CT_HOSTNAME" ]]; then
            whiptail --title "$(dialog_title Fehler)" --msgbox "${MSG[input_empty]}" 8 60
            continue
        fi
        # Hostname nach RFC prüfen
        if [[ "$CT_HOSTNAME" =~ ^[a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?$ ]]; then
            break
        else
            whiptail --title "$(dialog_title Fehler)" --msgbox "${MSG[input_invalid]}" 8 60
        fi
    done
    log "${MSG[hostname]} $CT_HOSTNAME"
}

### Passwort sicher abfragen (mindestens 8 Zeichen)
### Prompt for root password and validate minimum length
input_password() {
    while true; do
        CT_PASSWORD=$(whiptail --title "$(dialog_title Passwort)" \
            --passwordbox "${MSG[password]}" 10 60 "" 3>&1 1>&2 2>&3) || exit_with_log "${MSG[abort]}"
        if [[ -z "$CT_PASSWORD" || ${#CT_PASSWORD} -lt 8 ]]; then
            whiptail --title "$(dialog_title Fehler)" --msgbox "${MSG[input_invalid]}" 8 60
            continue
        fi
        break
    done
    log "${MSG[password]} wurde erfolgreich gesetzt."
}

### Template-Auswahl via Menü
### Display template list and let user select one
select_template() {
    log "${MSG[template_select]} $TEMPLATE_PATH"
    mapfile -t templates < <(find "$TEMPLATE_PATH" -maxdepth 1 -type f -name '*-standard_*.tar.zst' | sort)
    [[ ${#templates[@]} -eq 0 ]] && exit_with_log "${MSG[template_none]}"
    local menu_items=()
    for tpl_path in "${templates[@]}"; do
        tpl_file=$(basename "$tpl_path")
        menu_items+=("$tpl_file" "")
    done
    TEMPLATE_FILE=$(whiptail --title "$(dialog_title Template)" \
        --menu "${MSG[template_select]}" 20 70 10 "${menu_items[@]}" 3>&1 1>&2 2>&3) \
        || exit_with_log "${MSG[abort]}"
    OSTEMPLATE="${TEMPLATE_PATH}/${TEMPLATE_FILE}"
    export OSTEMPLATE
    log "${MSG[template_chosen]/%s/$TEMPLATE_FILE}"
}

### RootFS-Größe interaktiv erfragen (in GB, Ganzzahl)
### Prompt for root filesystem size in GB (integer)
input_rootfs_size() {
    ROOTFS_SIZE=$(whiptail --title "$(dialog_title RootFS)" \
        --inputbox "${MSG[rootfs]}" 8 50 "2" 3>&1 1>&2 2>&3) || exit_with_log "${MSG[abort]}"
    if ! [[ "$ROOTFS_SIZE" =~ ^[1-9][0-9]*$ ]]; then
        whiptail --title "$(dialog_title Fehler)" --msgbox "${MSG[input_invalid]}" 8 60
        input_rootfs_size
        return
    fi
    log "${MSG[rootfs]}: $ROOTFS_SIZE GB"
}

### CPU-/RAM-Ressourcen interaktiv abfragen
### Prompt for CPU cores and RAM allocation
input_resources() {
    CT_CORES=$(whiptail --title "$(dialog_title CPU)" \
        --inputbox "${MSG[cores]}" 8 50 "1" 3>&1 1>&2 2>&3) || exit_with_log "${MSG[abort]}"
    if ! [[ "$CT_CORES" =~ ^[1-9][0-9]*$ ]]; then
        whiptail --title "$(dialog_title Fehler)" --msgbox "${MSG[input_invalid]}" 8 60
        input_resources
        return
    fi
    CT_MEMORY=$(whiptail --title "$(dialog_title RAM)" \
        --inputbox "${MSG[memory]}" 8 50 "512" 3>&1 1>&2 2>&3) || exit_with_log "${MSG[abort]}"
    if ! [[ "$CT_MEMORY" =~ ^[1-9][0-9]*$ ]]; then
        whiptail --title "$(dialog_title Fehler)" --msgbox "${MSG[input_invalid]}" 8 60
        input_resources
        return
    fi
    log "${MSG[cores]}: $CT_CORES, ${MSG[memory]}: $CT_MEMORY MB"
}

### Modusauswahl (derzeit Einzelmodus/Abbruch)
### Select mode (currently only single/cancel)
select_mode() {
    local mode
    mode=$(whiptail --title "${MSG[mode_title]}" \
        --menu "${MSG[choose_type]}" 12 60 2 \
        "single" "${MSG[desc_single]}" \
        "cancel" "${MSG[mode_cancel]}" 3>&1 1>&2 2>&3) || exit_with_log "${MSG[abort]}"
    case "$mode" in
        single)
            log "${MSG[mode_selected_single]}"
            ;;
        cancel)
            exit_with_log "${MSG[abort]}"
            ;;
        *)
            exit_with_log "Unbekannter Modus: $mode"
            ;;
    esac
}

### Nächste freie LXC-Container-ID finden
### Find next free LXC container ID
#find_next_ctid() {
#    local last_id
#    last_id=$(pct list | awk 'NR>1 {print $1}' | sort -n | tail -n1)
#    if [[ -z "$last_id" ]]; then
#        CT_ID=100
#    else
#        CT_ID=$((last_id + 1))
#    fi
#    log "${MSG[ctid_assigned]} $CT_ID"
#}

find_next_ctid() {
    for id in $(seq 100 999); do
        if ! pct status "$id" &>/dev/null; then
            CT_ID="$id"
            log "${MSG[ctid_assigned]} $CT_ID"
            return
        fi
    done
    exit_with_log "Keine freie Container-ID im Bereich 100–999 gefunden."
}


### OS-Typ aus Template-Filename bestimmen
### Detect OSType automatically from selected template filename
detect_ostype_from_template() {
    local template="${TEMPLATE_FILE:-}"
    if [[ -z "$template" ]]; then
        exit_with_log "${MSG[ostype_unknown]:-Fehler: OS-Typ nicht erkannt!}"
    fi
    if [[ "$template" =~ ^([a-zA-Z0-9]+)- ]]; then
        OSType="${BASH_REMATCH[1]}"
    else
        OSType=""
        exit_with_log "${MSG[ostype_unknown]:-Fehler: OS-Typ im Template nicht erkannt!}"
    fi
    log "${MSG[ostype_detected]:-OS-Typ erkannt:} $OSType"
}
