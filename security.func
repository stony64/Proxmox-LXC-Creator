#!/usr/bin/env bash
###############################################################################
# security.func – Sicherheitsprüfungen für Proxmox LXC Creator
# Version:    2.7.5
# Datum:      2025-07-21
#
# Beschreibung (Deutsch):
# Prüft wichtige Voraussetzungen: root-Rechte, Bash-Version, Tools, Pfade.
#
# Description (English):
# Ensures script prerequisites: root, bash version, required tools, paths.
#
###############################################################################

### Prüfen, ob das Skript als root ausgeführt wird
### Ensure script is executed as root
#check_root() {
#    echo "DEBUG: EUID='$EUID'"
#    [[ "$EUID" -ne 0 ]] && exit_with_log "${MSG[root_required]}"
##    [[ "$EUID" -ne 0 ]] && exit_with_log "Dieses Skript muss als root ausgeführt werden."
#}
check_root() {
    local euid="${EUID:-}"

    echo "DEBUG: EUID='$euid'"

    if [[ -z "$euid" ]]; then
        exit_with_log "EUID nicht verfügbar – Bash-Umgebung fehlerhaft?"
    fi

    if ! [[ "$euid" =~ ^[0-9]+$ ]]; then
        exit_with_log "Ungültiger EUID-Wert: '$euid'"
    fi

    if (( euid != 0 )); then
        exit_with_log "${MSG[root_required]:-Root-Rechte erforderlich.}"
    fi
}

check_bash_version() {
    if [[ -z "${BASH_VERSINFO[0]:-}" || -z "${BASH_VERSINFO[1]:-}" ]]; then
        exit_with_log "${MSG[abort]:-BASH_VERSINFO nicht verfügbar – bitte Skript mit bash ausführen.}"
    fi

    local bash_major="${BASH_VERSINFO[0]}"
    local bash_minor="${BASH_VERSINFO[1]}"

    if ! [[ "$bash_major" =~ ^[0-9]+$ ]] || ! [[ "$bash_minor" =~ ^[0-9]+$ ]]; then
        exit_with_log "Bash-Version nicht numerisch auswertbar: $bash_major.$bash_minor"
    fi

    if (( bash_major < 4 )); then
        exit_with_log "Bash $bash_major.$bash_minor zu alt – mindestens 4.0 erforderlich."
    fi
}

check_required_tools() {
    local tools=("whiptail" "pct" "git")
    for tool in "${tools[@]}"; do
        command -v "$tool" &>/dev/null || exit_with_log "Benötigtes Tool '$tool' fehlt."
    done
}

check_directory_exists() {
    local dirpath="$1"
    if [[ ! -d "$dirpath" ]]; then
        log_error "Verzeichnis nicht gefunden: $dirpath"
        log_error "Directory not found: $dirpath"
        exit 1
    fi
}
