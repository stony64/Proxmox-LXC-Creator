#!/usr/bin/env bash
###############################################################################
# ssh.func – SSH-Key-Suche und Setup für Proxmox LXC
# Version:    2.7.5
# Datum:      2025-07-21
#
# Beschreibung (Deutsch):
# Diese Datei enthält Funktionen zur Suche, Prüfung und Bereitstellung
# eines SSH Public Keys anhand eines Kommentars. Der Key wird entweder vor dem
# Start direkt ins Root-FS geschrieben oder nach dem Start via pct exec injiziert.
#
# Description (English):
# This module handles locating, validating, and preparing a public SSH key
# based on a comment string. The key is either placed directly into the root
# filesystem or injected into the container after startup.
#
###############################################################################

### Kommentarzeichenkette vom Nutzer zur SSH-Key-Suche abfragen
### Ask user for identifying comment of SSH public key
ask_for_laptop_key_comment() {
    LAPTOP_KEY_COMMENT=$(whiptail --title "$(dialog_title SSH)" \
        --inputbox "${MSG[ssh_comment_prompt]}" 10 70 "" 3>&1 1>&2 2>&3) \
        || exit_with_log "${MSG[abort]}"

    [[ -z "$LAPTOP_KEY_COMMENT" ]] && exit_with_log "${MSG[input_empty]}"
    log "${MSG[ssh_lookup]}: $LAPTOP_KEY_COMMENT"
}

### SSH-Key aus authorized_keys suchen und lokal in Datei zwischenspeichern
### Locate matching SSH key by comment and write to temp file
extract_laptop_key() {
    local authfile="/root/.ssh/authorized_keys"
    [[ ! -f "$authfile" ]] && exit_with_log "authorized_keys nicht gefunden unter: $authfile"

    local key_match
    key_match=$(grep -m1 "$LAPTOP_KEY_COMMENT" "$authfile" || true)

    if [[ "$key_match" =~ ^ssh-(rsa|ed25519|ecdsa) ]]; then
        SSH_PUBKEY=$(mktemp "/tmp/lxc_ssh_${CT_ID}_XXXXXXXX.pub")
        echo "$key_match" > "$SSH_PUBKEY"
        chmod 600 "$SSH_PUBKEY"
        log_success "${MSG[ssh_found]}"
    else
        whiptail --title "$(dialog_title SSH)" --msgbox "${MSG[ssh_not_found]}" 8 60
        SSH_PUBKEY=""
    fi
}

### Key vor dem Start direkt in das RootFS des Containers einfügen
### Copy key directly into root FS before container is started
prepare_ssh_key_prestart() {
    if [[ -n "$SSH_PUBKEY" && -f "$SSH_PUBKEY" ]]; then
        local ssh_dir="/var/lib/lxc/$CT_ID/rootfs/root/.ssh"
        mkdir -p "$ssh_dir"
        cp "$SSH_PUBKEY" "$ssh_dir/authorized_keys"
        chmod 700 "$ssh_dir"
        chmod 600 "$ssh_dir/authorized_keys"
        chown root:root "$ssh_dir" "$ssh_dir/authorized_keys"
        log "${MSG[ssh_setup]}"
    fi
}

### SSH-Key nach dem Start in den laufenden Container injizieren
### Push SSH key into running container, fallback to password auth if missing
finalize_ssh_key_after_start() {
    if [[ -n "$SSH_PUBKEY" && -f "$SSH_PUBKEY" ]]; then
        pct exec "$CT_ID" -- bash -c '
            mkdir -p /root/.ssh
            cat > /root/.ssh/authorized_keys < /dev/stdin
            chmod 600 /root/.ssh/authorized_keys
            chown root:root /root/.ssh/authorized_keys
        ' < "$SSH_PUBKEY"

        log_success "${MSG[ssh_setup]}"
    else
        # Fallback aktivieren: Root-Login via Passwort erlauben
        pct exec "$CT_ID" -- bash -c '
            sed -i "s/^#*PermitRootLogin.*/PermitRootLogin yes/" /etc/ssh/sshd_config
            sed -i "s/^#*PasswordAuthentication.*/PasswordAuthentication yes/" /etc/ssh/sshd_config
            systemctl restart ssh || systemctl restart sshd || true
        '

        log "${MSG[ssh_temp]}"
    fi
}
